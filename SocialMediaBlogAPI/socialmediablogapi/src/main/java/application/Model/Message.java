package application.Model;

import java.util.Objects;

public class Message {
    /**
     * an id for the message that is automatically generated by the
     * database
     */
    public int message_id;
    /**
     * identifier for the user posting the message. We will asume
     * that this is provided by the front end of the application
     */
    public int posted_by;
    /**
     * the text for the message. Must not be blank
     */
    public String message_text;
    /**
     * The epoch time is when the tweet was posted (number of seconds since
     * Jan 1, 1970. We will assume this number is provided by the front end of the application)
     */
    public long time_posted_epoch;
    /**
     * default no-args constuctor
     */
    public Message() {
    }

    /**
     * constructor to be used when creating a new message. the message_id is ommited
     * since it will be provided by the database
     * @param posted_by
     * @param message_text
     * @param time_posted_epoch
     */
    public Message(int posted_by, String message_text, long time_posted_epoch) {
        this.message_text = message_text;
        this.posted_by = posted_by;
        this.time_posted_epoch = time_posted_epoch;
    }

    /**
     * constructor to be used for viewing existing messages
     * @param message_id
     * @param message_text
     * @param posted_by
     * @param time_posted_epoch
     */
    public Message(int message_id, String message_text, int posted_by, long time_posted_epoch) {
        this.message_id = message_id;
        this.message_text = message_text;
        this.posted_by = posted_by;
        this.time_posted_epoch = time_posted_epoch;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @return message_id
     */
    public int getMessage_id() {
        return message_id;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @param message_id
     */
    public void setMessage_id(int message_id) {
        this.message_id = message_id;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @return posted_by
     */
    public int getPosted_by() {
        return posted_by;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @param posted_by
     */
    public void setPosted_by(int posted_by) {
        this.posted_by = posted_by;
    }
    /**
    * getters and setters neccessary for Jackson ObjectMapper to work
    * @return message_text
    */
    public String getMessage_text() {
        return message_text;
    }
    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @param message_text
     */

    public void setMessage_text(String message_text) {
        this.message_text = message_text;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @return time_posted_epoch
     */
    public long getTime_posted_epoch() {
        return time_posted_epoch;
    }

    /**
     * getters and setters neccessary for Jackson ObjectMapper to work
     * @param time_posted_epoch
     */
    public void setTime_posted_epoch(long time_posted_epoch) {
        this.time_posted_epoch = time_posted_epoch;
    }

    /**
     * makes comparison of the hash of two objects possible
     * @return hash
     */
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 53 * hash + this.message_id;
        hash = 53 * hash + this.posted_by;
        hash = 53 * hash + Objects.hashCode(this.message_text);
        hash = 53 * hash + (int) (this.time_posted_epoch ^ (this.time_posted_epoch >>> 32));
        return hash;
    }

    /**
     * overrides the default equals method to compare class objects and instance objects
     * @return true if obj is equal to the current instance
     */

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Message other = (Message) obj;
        if (this.message_id != other.message_id) {
            return false;
        }
        if (this.posted_by != other.posted_by) {
            return false;
        }
        if (this.time_posted_epoch != other.time_posted_epoch) {
            return false;
        }
        return Objects.equals(this.message_text, other.message_text);
    }

    /**
     * overrides default toString() method
     * used to display the Message object instance
     * @return object in a representable manner
     */

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Message{");
        sb.append("message_id=").append(message_id);
        sb.append(", posted_by=").append(posted_by);
        sb.append(", message_text=").append(message_text);
        sb.append(", time_posted_epoch=").append(time_posted_epoch);
        sb.append('}');
        return sb.toString();
    }

    

    

  
    
}
